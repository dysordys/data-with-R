# R programming basics {#sec-basics}

```{r}
#| echo: false
library(magrittr)
```

## Using R as a calculator

As we have seen before, R can be used as a glorified pocket calculator. Elementary operations work as expected: `+` and `-` are symbols for addition and subtraction, while `*` and `/` are multiplication and division. Thus, we can enter things such as

```{r}
#| eval: false
3 * 4 - 6 / 2 + 1
```

in the console, and press Enter (Return, on a Mac) to get the result, 10. One even has exponentiation, denoted by the symbol `^`. To raise 2 to the 5th power), we enter

```{r}
#| eval: false
2^5
```

and obtain the expected 32. Furthermore, one is not restricted to integers. It is possible to calculate with fractional numbers:

```{r}
#| eval: false
1.62 * 34.56
```

whose result is 55.9872. **Note:** in line with Anglo-Saxon tradition, R uses decimal points instead of decimal commas. Entering `1,62 * 34,56` will throw an error.


R also has many basic mathematical functions built into it. For example, `sqrt()` is the square root function; `cos()` is the cosine function, `log()` is the (natural) logarithm, `exp()` is the exponential function, and so on. The following tables summarize the symbols for various arithmetic operations and basic mathematical functions built into R:

    Symbol        Meaning       Example      Form in R
  ---------- ----------------- ------------ -----------
    `+`        addition         2 + 3        `2 + 3`
    `-`        subtraction      5 - 1        `5 - 1`
    `*`        multiplication   2 &#183; 6   `2 * 6`
    `/`        division         9 / 5        `9 / 5`
    `^`        raise to power   3^2^         `3 ^ 2`
                                           
   Function      Meaning          Example    Form in R
  ---------- ----------------- ------------ -----------
   `log()`     natural log      log(4)       `log(4)`
   `exp()`     exponential      e^4^         `exp(4)`
   `sqrt()`    square root      &#8730;4     `sqrt(4)`
   `log2()`    base-2 log       log~2~(4)    `log2(4)`
   `log10()`   base-10 log      log~10~(4)   `log10(4)`
   `sin()`     sine (radians!)  sin(4)       `sin(4)`
   `abs()`     absolute value   |-4|         `abs(-4)`

Expressions built from these basic blocks can be freely combined. Try to calculate 3^log(4)^ - sin(e^2^) for instance. To do so, we simply type

```{r}
#| eval: false
3^log(4) - sin(exp(2))
```

and press Enter to get the result, 3.692108. Now obtain e^1.3^(4 - sin(&#960;/3)). Notice the parentheses enclosing 4 - sin(&#960;/3). This means, as usual, that this expression is evaluated first, before any of the other computations. It can be implemented in R the same way, by using parentheses:

```{r}
#| eval: false
exp(1.3) * (4 - sin(3.14159 / 3))
```

Note also that you *do* need to indicate the symbol for multiplication between closing and opening parentheses: omitting this results in an error. Try it: entering `exp(1.3)(4 - sin(3.14159/3))` instead of `exp(1.3)*(4 - sin(3.14159/3))` throws an error message. Also, be mindful that `exp(1.3)*(4 - sin(3.14159/3))` is not the same as `exp(1.3)*4 - sin(3.14159/3)`. This is because multiplication takes precedence over addition and subtraction, meaning that multiplications and divisions are performed first, and additions/subtractions get executed only afterwards---unless, of course, we override this behaviour with parentheses. In general, whenever you are uncertain about the order of execution of operations, it can be useful to explicitly use parentheses, even if it turns out they aren't really necessary. For instance, you might be uncertain whether `3 * 6 + 2` first multiplies 3 by 6 and then adds 2 to the result, or if it first adds 2 to 6 and then multiplies that by 3. In that case, if you want to be absolutely sure that you perform the multiplication first, just write `(3 * 6) + 2`, explicitly indicating with the parentheses that the multiplication should be performed first---even though doing so would not be strictly necessary in this case.

Incidentally, you do not need to type out `3.14159` to approximate &#960; in the mathematical expressions above. R has a built-in constant, `pi`, that you can use instead. Therefore, `exp(1.3)*(4 - sin(pi/3))` produces the same result as our earlier `exp(1.3)*(4 - sin(3.14159/3))`.

Another thing to note is that the number of spaces between various operations is irrelevant. `4*(9-6)` is the same as `4*(9 - 6)`, or `4 * (9 - 6)`, or, for that matter, `4   * (9-    6)`. To the machine, they are all the same---it is only us, the human users, who might get confused by that last form...

It is possible to get help on any function from the system itself. Type either `help(asin)` or the shorter `?asin` in the console to get information on the function `asin`, for instance. Whenever you are not sure how to use a certain function, just ask the computer.


## Variables and types

### Numerical variables and variable names

You can assign a value to a named variable, and then whenever you call on that variable, the assigned value will be substituted. For instance, to obtain the square root of 9, you can simply type `sqrt(9)`; or you can assign the value 9 to a variable first:

```{r}
#| eval: false
x <- 9
sqrt(x)
```

This will calculate the square root of `x`, and since `x` was defined as 9, we get `sqrt(9)`, or 3.

The name for a variable can be almost anything, but a few restrictions apply. First, the name must consist only of letters, numbers, the period (`.`), and the underscore (`_`) character. Second, the variable's name cannot start with a number or an underscore. So `one_result` or `one.result` are fine variable names, but `1_result` or `_one_result` are not. Similarly, the name `crowns to $` is not valid because of the spaces and the dollar (`$`) symbol, neither of which are numbers, letters, period, or the underscore.

Additionally, there are a few *reserved words* which have a special meaning in R, and therefore cannot be used as variable names. Examples are: `if`, `NA`, `TRUE`, `FALSE`, `NULL`, and `function`. You can see the complete list by typing `?Reserved`.

However, one can override all these rules and give absolutely any name to a variable by enclosing it in backward tick marks (`` ` `  ``). So while `crowns to $` and `function` are not valid variable names, `` `crowns to $` `` and `` `function` `` are! For instance, you could type

```{r}
`crowns to $` <- 0.09 # Approximate SEK-to-USD exchange rate
my_money <- 123 # Assumed to be given in Swedish crowns
my_money_in_USD <- my_money * `crowns to $`
print(my_money_in_USD)
```

to get our money's worth in US dollars. Note that the freedom of naming our variables whatever we wish comes at the price of having to always include them between back ticks to refer to them. It is entirely up to you whether you would like to use this feature or avoid it; however, be sure to recognize what it means when looking at R code written by others.

Notice also that the above chunk of code includes *comments*, prefaced by the hash (`#`) symbol. Anything that comes after the hash symbol on a line is ignored by R; it is only there for other humans to read.


:::{.callout-warning}
The variable `my_money_in_USD` above was defined in terms of the two variables `my_money` and `` `crowns to $` ``. You might be wondering: if we change `my_money` to a different value by executing `my_money <- 1000` (say), does `my_money_in_USD` also get automatically updated? **The answer is no:** the value of `my_money_in_USD` will remain unchanged. In other words, variables are not automatically recalculated the way Excel formula cells are. To recompute `my_money_in_USD`, you will need to execute `` my_money_in_USD <- my_money * `crowns to $` `` again. This leads to a recurring theme in programming: while assigning variables is convenient, it also carries some dangers, in case we forget to appropriately update them. In this course, we will be emphasizing a style of programming which avoids relying on (re-)assigning variables as much as possible.
:::


### Strings

So far we have worked with numerical data. R can also work with textual information. In computer science, these are called *character strings*, or just *strings* for short. To assign a string to a variable, one has to enclose the text in quotes. For instance,

```{r}
#| eval: false
s <- "Hello World!"
```

assigns the literal text `Hello World!` to the variable `s`. You can print it to screen either by just typing `s` at the console and pressing Enter, or typing `print(s)` and pressing Enter.

One useful function that works on strings is `paste()`, which makes a single string out of several ones (in computer lingo, this is known as *string concatenation*). For example, try

```{r}
s1 <- "Hello"
s2 <- "World!"
message <- paste(s1, s2)
print(message)
```

The component strings are separated by a space, but this can be changed with the optional `sep` argument to the `paste()` function:

```{r}
message <- paste(s1, s2, sep = "")
print(message)
```

This results in `message` becoming `HelloWorld!`, without the space in between. Between the quotes, you can put any character (including nothing, like above), which will be used as a separator when merging the strings `s1` and `s2`. So specifying `sep = "-"` would have set `message` equal to `Hello-World!` (try it out and see how it works).

It is important to remember that quotes distinguish information to be treated as text from information to be treated as numbers. Consider the following two variable assignments:

```{r}
#| eval: false
a <- 6.7
b <- "6.7"
```

Although they look superficially similar, `a` is the number 6.7 while `b` is the string "6.7", and the two are not equal! For instance, executing `2 * a` results in 13.4, but `2 * b` throws an error, because it does not make sense to multiply a bunch of text by 2.


### Logical values

Let us type the following into the console, and press Enter:

```{r}
2 > 1
```

We are asking the computer whether 2 is larger than 1. And it returns the answer: `TRUE`. By contrast, if we ask whether two is less than one, we get `FALSE`:

```{r}
2 < 1
```

Similar to "greater than" and "less than", there are other logical operations as well, such as "greater than or equal to", "equal to", "not equal to", and others. The table below lists the most common options.

    Symbol     Meaning                  Example in R         Result
  ---------- ----------------------- ----------------------- -----------
    `<`        less than                `1 < 2`              `TRUE`
    `>`        greater than             `1 > 2`              `FALSE`
    `<=`       less than or equal       `2 <= 5.3`           `TRUE`
    `>=`       greater than or equal    `4.2 >= 3.6`         `TRUE`
    `==`       equal to                 `5 == 6`             `FALSE`
    `!=`       not equal to             `5 != 6`             `TRUE`
    `!`        not                      `!FALSE`             `TRUE`
    `&`        and                      `(1 > 2) & (1 < 2)`  `FALSE`
    `|`        or                       `(1 > 2) | (1 < 2)`  `TRUE`
    `%in%`     is element of set        `2 %in% c(1, 2, 3)`  `TRUE`

The `==` and `!=` operators can also be used with strings: `"Hello World" == "Hello World!"` returns `FALSE`, because the two strings are not exactly identical, differing in the final exclamation mark. Similarly, `"Hello World" != "Hello World!"` returns `TRUE`, because it is indeed true that the two strings are unequal.

*Logical values* can either be `TRUE` or `FALSE`, with no other options.^[Technically, there is a third option: a logical value could be equal to `NA`, indicating missing data. Numerical and string variables can also be `NA` to show that their values are missing.] This is in contrast with numbers and character strings, which can take on a myriad different values. Note that `TRUE` and `FALSE` must be capitalized: `true`, `False`, or anything other than the fully capitalized forms will result in an error. Just like in the case of strings and numbers, logical values can be assigned to variables:

```{r}
lgl <- 3 > 4 # Since 3 > 4 is FALSE, lgl will be assigned FALSE
print(!lgl) # lgl is FALSE, so !lgl ("not lgl") will be TRUE
```

The function `ifelse` takes advantage of logical values, doing different things depending on whether some condition is `TRUE` or `FALSE` ("*if* the condition is true *then* do something, *else* do some other thing"). It takes three arguments: the first is a condition, the second is the expression that gets executed only if the condition is true, and the third is the expression that executes only if the condition is false. To illustrate its use, we can apply it in a program that simulates a coin toss. R will generate *n* random numbers between 0 and 1 by invoking `runif(n)`. Here `runif` is a shorthand for "random-uniform", randomly generated numbers from a uniform distribution between 0 and 1. The function call `runif(1)` therefore produces a single random number, and we can interpret values less than 0.5 as having tossed heads, and other values as having tossed tails. The following lines implement this:

```{r}
#| echo: false
set.seed(8765)
```

```{r}
toss <- runif(1)
coin <- ifelse(toss < 0.5, "heads", "tails")
print(coin)
```

This time we happened to have tossed heads, but try re-running the above three lines over and over again, to see that the results keep coming up at random.


## Vectors

A *vector* is simply a sequence of variables of the same type. That is, the sequence may consist of numbers *or* strings *or* logical values, but one cannot intermix them. The `c()` function will create a vector in the following way:

```{r}
x <- c(2, 5, 1, 6, 4, 4, 3, 3, 2, 5)
```

This is a vector of numbers. If, after entering this line, you type `x` or `print(x)` and press Enter, all the values in the vector will appear on screen:

```{r}
x
```

What can you do if you want to display only the third entry? The way to do this is by applying brackets:

```{r}
x[3]
```

Never forget that vectors and its elements are simply variables! To show this, calculate the value of `x[1] * (x[2] + x[3])`, but before pressing Enter, guess what the result will be. Then check if you were correct. You can also try typing `x * 2`:

```{r}
x * 2
```

What happened? Now you performed an operation on the vector as a whole, i.e., you multiplied each element of the vector by two. Remember: you can perform all the elementary operations on vectors as well, and then the result will be obtained by applying the operation on each element separately.

Certain functions are specific to vectors. Try `mean(x)` and `var(x)` for instance (if you are not sure what these do, just ask by typing `?mean` or `?var`). Some others to try: `max`, `min`, `length`, and `sum`.

One can quickly generate vectors of sequences of values, using one of two ways. First, the notation `1:10` generates a vector of integers ranging from 1 to 10, in steps of 1. (Similarly, `2:7` generates the same vector as `c(2, 3, 4, 5, 6, 7)`, and so on). Second, the function `seq()` generates sequences, starting with the first argument, ending with the last, in steps defined by an optional `by` argument. So calling

```{r}
seq(0, 10, by = 0.1)
```

creates a vector of numbers ranging from 0 to 10, in steps of 0.1.

Just as one can create a vector of numerical values, it is also possible to create a vector of character strings of logical values. For example:

```{r}
#| eval: false
stringVec <- c("I am the first string", "I am the second", "And I am the 3rd")
```

Now `stringVec[1]` is simply equal to the string `"I am the first string"`, `stringVec[2]` is equal to `"I am the second"`, and so on. Similarly, defining

```{r}
#| eval: false
logicVec <- c(TRUE, FALSE, TRUE, TRUE)
```

gives a vector whose second entry, `logicVec[2]`, is equal to `FALSE`, and its other three entries are `TRUE`.


## Functions

A *function* in R can be thought of as a black box which receives *inputs* and, depending on those inputs, produces some *output*. Vending machines provide a good working model of what a "function" is in computer science: depending on the inputs they receive (in the form of coins of various denomination, plus the buttons you press for a particular item) they give you some output (Mars bars, Coke, and the like). It's just that computer scientists like to refer to the inputs as "function arguments" or simply "arguments" instead of coins, and to the output as the "return value" instead of Red Bull. Arguments are often also referred to as "parameters" to the function.

We have already seen some functions at work in R: `sqrt` and `log` are functions, but so are `setwd` (which, as you may recall, will set your working directory) and `library` (which loads R packages). The general workings of a function are illustrated below:

```
                 --------------
argument 1 ----> |            |
argument 2 ----> |            |
argument 3 ----> |  FUNCTION  | ----> return value
...              |            |
argument n ----> |            |
                 --------------
```

When you ask a function to do something, you're *calling* the function. The arguments of functions are always enclosed in parentheses. For example, executing `sqrt(9)`, calls the built-in square root function. Its argument (or input, or parameter) is 9, and its return value is the square root of 9, which is 3.


### User-defined functions

Thus far, we have been using many built-in functions in R, such as `exp()`, `log()`, `sqrt()`, `setwd()`, and others. However, it is also possible to define our own functions, which can then be used just like any built-in function. The way to do this is to use the `function` keyword, followed by the function's arguments in parentheses, and then the R code comprising the function's body enclosed in curly braces `{}`. For example, here is a function which calculates the area of a circle with radius `r`:

```{r}
circleArea <- function(r) {
  area <- r^2 * pi
  return(area)
}
```

The function implements the formula that the area of a circle is equal to &#960; times its radius squared. The `return` keyword determines what result the function will output when it finishes executing. In this case, the function returns the value of `area` that is created within the function. After running the above lines, the computer now "knows" the function. Calling `circleArea(3)` will, for example, calculate the area of a circle with radius 3, which is approximately 28.27433.

One can define functions with more than one argument. For instance, here is a function that calculates the volume of a cylinder with radius `r` and height `h`:

```{r}
cylinderVol <- function(r, h) {
  baseArea <- circleArea(r)
  volume <- baseArea * h
  return(volume)
}
```

Here we used the fact that the volume of a cylinder is the area of its base circle, times its height. Notice also that we made use of our earlier `circleArea` function within the body of `cylinderVol`. While this was not a necessity and we could have simply written `volume <- r^2 * pi * h` above, this is generally speaking good practice: by constructing functions to solve smaller problems, you can write slightly more complicated functions which make use of those simpler ones. Then, you will be able to write even more complex functions using the slightly more complex ones in turn---and so on. We will discuss this principle in more detail below, in @sec-funccomp.

One very important property of functions is that any variables defined within them (such as `volume` above) are *local* to that function. This means that they are not visible from outside: even after calling the function, the variable `volume` will not be accessible to the rest of the program, despite the fact that it was declared in the function. This helps us create programs with modular structure, where functions operate as black boxes: we can use them without looking inside.

When calling a function, it is optional but possible to name the arguments explicitly. This means that calling `circleArea(3)` is the same as calling `circleArea(r = 3)`, and calling `cylinderVol(2, 3)` is the same as calling `cylinderVol(r = 2, h = 3)`. Even more is true: since naming the arguments removes any ambiguity about which argument is which, one may even call `cylinderVol(h = 3, r = 2)`, with the arguments in reverse order, and this will still be equivalent to `cylinderVol(2, 3)`. As mentioned, naming arguments this way is optional, but it can be useful to do so, because it can increase the clarity of our programs. To give an example from a built-in function in R, take `rep(5, 3)`. Does this function create a vector with 5 entries, each equal to 3, or does it make a vector with 3 entries, each equal to 5? While reading the documentation (or simply executing these two function calls and comparing the outputs) reveals that it is the latter, one can clarify this easily, because the second argument of `rep()` is called `times`, as seen from reading the help after typing `?rep`. We can then write `rep(5, times = 3)`, which is now easy to interpret: it is a vector with the number 5 repeated 3 times.

```{r}
rep(5, times = 3)
```

One may even define default values for one or more of the arguments to any function. If defaults are given, the user does not even have to specify the value for that argument. It will then automatically be set to the default value instead. For example, one could rewrite the `cylinderVol()` function to specify default values for `r` and `h`. Making these defaults be 1 means we can write:

```{r}
cylinderVol <- function(r = 1, h = 1) {
  baseArea <- circleArea(r)
  volume <- baseArea * h
  return(volume)
}
```

If we now call `cylinderVol()` without specifying arguments, the defaults will be substituted for `r` and `h`. Since both are equal to 1, the cylinder volume will simply be &#960; (about 3.14159), which is the result we will get back. Alternatively, if we call `cylinderVol(r = 2)`, then the function returns 4&#960; (approximately 12.56637), because the default value of 1 is substituted in place of the unspecified height argument `h`. Importantly, if we *don't* define default values and yet omit to specify one or more of those parameters, we get back an error message. For example, our earlier `circleArea` function had no default value for its argument `r`, so leaving it unspecified throws an error:

```{r}
#| error: true
circleArea()
```


### Naming rules for functions and the concept of syntactic sugar

The rules for naming functions is the same as for naming variables. A valid function name is a combination of letters, numbers, and underscores (`_`), as long as the first character is not a number or underscore. Additionally, a function's name cannot be one of the reserved words (see `?Reserved`). Just like in the case of variables, one can override this and give any name whatsoever to functions if one encloses the name between back ticks. So while `crowns to $` is not a valid function name, `` `crowns to $` `` is.

One thing to know about R is that even elementary operations are treated as function calls internally. When we write down even something as innocuous as `2 + 5`, what really happens is that R calls the *function* called `+`, with arguments 2 and 5. In fact, we can write it that way too: `2 + 5` is completely equivalent to writing `` `+`(2, 5) ``. Note the back ticks around `` `+` ``: these are required because `+` is not a letter, number, or underscore. Whenever we write down `2 + 5`, the system internally converts it into `` `+`(2, 5) `` first, and then proceeds with the execution. Thus, the fact that we can add two numbers by writing `2 + 5` is just a convenience, a way of entering addition in a way that we tend to be more used to. Such constructions have a name in computer science: they are called *syntactic sugar*. Writing `2 + 5` is just syntactic sugar for the actual internal form `` `+`(2, 5) ``, because the latter would be stranger to write. Of course, the same holds for all other elementary operations: `` `-` ``, `` `*` ``, `` `/` ``, and `` `^` `` are also functions in R. This means that, e.g., writing `` `-`(`^`(2, 3), `*`(4, 2)) `` is equivalent to `2^3 - 4 * 2`.

Another example for the fact that internally R treats operations as functions is the subsetting of vectors or matrices. As we have learned, given the vector `x`, typing `x[3]` will extract the third entry of the vector. In fact, this is again syntactic sugar for easier use. Internally, an expression such as `x[3]` is actually interpreted as `` `[`(x, 3) ``. The function `` `[` `` (note the back ticks, which are necessary due to the fact that the symbol `[` is not a letter, number, or underscore) takes two arguments: a vector, and the index (or indices) which we request from that vector.

While generally speaking, one would never actually want to type `` `[`(x, 3) `` instead of `x[3]` (the reason we have the syntactic sugar is to make our lives easier!), there are situations where being aware of these details of the internal workings of R can be helpful. We will see an example later in this chapter.


### Function composition {#sec-funccomp}

A function is like a vending machine: we give it some input(s), and it produces some output. The output itself may then be fed as input to another function---which in turn produces an output, which can be fed to yet another function, and so on. Chaining functions together in this manner is called the *composition* of functions. For example, we might need to take the square root of a number, then calculate the logarithm of the output, and finally, obtain the cosine of the result. This is as simple as writing `cos(log(sqrt(9)))`, if the number we start with is 9. More generally, one might even define a new function (let us call it `cls()`, after the starting letters of `cos`, `log`, and `sqrt`) like this:

```{r}
#| eval: false
cls <- function(x) {
  return(cos(log(sqrt(x))))
}
```

A remarkable property of composition is that the composed function (in this case, `cls`) is in many ways just like its constituents: it is also a black box which takes a single number as input and produces another number as its output. Putting it differently, if one did not know that the function `cls()` was defined by me manually as the composition of three more "elementary" functions, and instead claimed it was just another elementary built-in function in R, there would be no way to tell the difference just based on the behaviour of the function itself. The composition of functions thus has the important property of *self-similarity*: if we manage to solve a problem through the composition of functions, then that solution itself will behave like an "elementary" function, and so can be used to solve even more complex problems via composition---and so on.

If we conceive of a program written in R as a large lego building, then one can think of functions as the lego blocks out of which the whole construction is made. Lego pieces are designed to fit well together, one can always combine them in various ways. Furthermore, any combination of lego pieces itself behaves like a more elementary lego piece: it can be fitted together with other pieces in much the same way. Thus, the composition of functions is analogous to building larger lego blocks out of simpler ones. Remarkably, just as the size of a lego block does not hamper our ability to stick them together, the composability of functions is retained regardless of how many more elementary pieces each of them consist of. Thus, the composition of functions is an excellent way (some claim it is *the* way) to handle the complexity of large software systems.


### Function piping

One problem with composing many functions together is that the order of application must be read backwards. An expression such as `sqrt(sin(cos(log(1))))` means: "take the square root of the sine of the cosine of the natural logarithm of 1". But it is more convenient for the human brain to think of it the other way round: we first take the log of 1, then the cosine of the result, then the sine of what we got, and finally the square root. The problem of interpreting composed functions gets more difficult when the functions have more than one argument. Even something as relatively simple as

```{r}
#| warning: false
exp(mean(log(seq(-3, 11, by = 2)), na.rm = TRUE))
```

may cause one to stop and have to think about what this expression actually does---and it only involves the composition of four simple functions. One can imagine the difficulties of having to parse the composition of dozens of functions in this style.

The above piece of R code generates the numeric sequence -3, -1, 1, ..., 11 (jumping in steps of 2), and computes their geometric mean. To do so, it takes the logarithms of each value, takes their mean, and finally, exponentiates the result back. The problem is that the logarithm of negative numbers does not exist (more precisely, they are not real numbers), and therefore, `log(-3)` and `log(-1)` both produce undefined results. Thus, when taking the `mean` of the logarithms, we must remove any such undefined values. This can be accomplished via an extra argument to `mean`, called `na.rm` ("NA-remove"). By default, this is set to `FALSE`, but by changing it to `TRUE`, undefined values are simply ignored when computing the mean. For example `mean(c(1, 2, 3, NA))` returns `NA`, because of the undefined entry in the vector; but `mean(c(1, 2, 3, NA), na.rm = TRUE)` returns 2, the result one gets after discarding the `NA` entry.

All the above is difficult to see when looking at the expression

```{r}
#| eval: false
exp(mean(log(seq(-3, 11, by = 2)), na.rm = TRUE))
```

Part of the reason is the awkward "backwards order" of function applications, and that it is hard to see which function the argument `na.rm = TRUE` belongs to. Fortunately, there is a simple operator in R called a *pipe* (written `%>%`), which allows one to write the same code in a more streamlined way. The pipe was originally provided by the `magrittr` package,^[As of R 4.1.0, the R language also supports a native, built-in pipe operator `|>` as well. The package name `magrittr` is an allusion to Belgian surrealist artist René Magritte (1898-1967) because of his famous painting [La trahison des images](https://en.wikipedia.org/wiki/The_Treachery_of_Images).] but invoking `tidyverse` will also load it automatically:

```{r}
#| eval: false
library(tidyverse)
```

The pipe allows one to write function application in reverse order (first the argument and then the function), making the code more transparent. Formally,  `x %>% f()` is equivalent to `f(x)` for any function `f`. For example, `sqrt(9)` can also be written `9 %>% sqrt()`. Thus, `sqrt(sin(cos(log(1))))` can be written as `1 %>% log() %>% cos %>% sin() %>% sqrt()`, which reads straightforwardly as "start with the number 1; *then* take its log; *then* take the cosine of the result; *then* take the sine of that result; and *then*, finally, take the square root to obtain the final output". In general, it helps to pronounce `%>%` as "then".

The pipe also works for functions with multiple arguments. In that case, `x %>% f(y, ...)` is equivalent to `f(x, y, ...)`. That is, the pipe refers to the function's first argument (though it is possible to override this). Instead of `mean(log(seq(-3, 11, by = 2)), na.rm = TRUE)`, we can therefore write:

```{r, warning=FALSE}
seq(-3, 11, by = 2) %>%
  log() %>%
  mean(na.rm = TRUE) %>%
  exp()
```

This is fully equivalent to the traditional form, but is much more readable, because the functions are written in the order in which they actually get applied. Moreover, even though the program is built only from the composition of functions, it reads straightforwardly as if it was a sequence of imperative instructions: we start from the vector of integers `c(-3, -1, 1, 3, 5, 7, 9, 11)`; *then* we take the logarithm of each; *then* we take their average, discarding any invalid entries (produced in this case by taking the logarithm of negative numbers); and *then*, finally, we exponentiate back the result to obtain the geometric mean.


## Exercises

1. Which of the variable names below are valid, and why?
    * `first.result.of_computation`
    * `2nd.result.of_computation`
    * `dsaqwerty`
    * `dsaq werty`
    * `` `dsaq werty` ``
    * `break`
    * `is this valid?...`
    * `` `is this valid?...` ``
    * `is_this_valid?...`
2. Create a vector called `z`, with entries 1.2, 5, 3, 13.7, 6.66, and 4.2 (in that order). Then, by applying functions to this vector, obtain:
    * Its smallest entry.
    * Its largest entry.
    * The sum of all its entries.
    * The number of entries in the vector.
    * The vector's entries sorted in increasing order (Hint: look up the help for the built-in function `sort`).
    * The vector's entries sorted in decreasing order.
    * The product of the fourth entry with the difference of the third and sixth entries. Then take the absolute value of the result.
3. Define a vector of strings, called `s`, with the three entries `"the fat cat"`, `"sat on"`, and `"the mat"`.
    * Combine these three strings into a single string, and print it on the screen. (Hint: look up the help for the `paste` function, in particular its `collapse` argument.)
    * Reverse the entries of `s`, so they come in the order `"the mat"`, `"sat on"`, and `"the fat cat"`. (Hint: check out the `rev` function.) Then merge the three strings again into a single one, and print it on the screen.
4. Assume you have a population of some organism in which one given allele of some gene is the only one available in the gene pool. If a new mutant organism with a different, selectively advantageous allele appears, it would be reasonable to conclude that the new allele will fix in the population and eliminate the original one over time. This, however, is not necessarily true, because a very rare allele might succumb to being eliminated by chance, regardless of how advantageous it is. According to Motoo Kimura's famous formula, the probability of such a new allele eventually fixing in the population is given as:
    $$ P = \frac{1 - \text{e}^{-s}}{1 - \text{e}^{-2Ns}} $$
    [@Gillespie2004]. Here *P* is the probability of eventual fixation, *s* is the selection differential (the degree to which the new allele is advantageous over the original one), and *N* is the (effective) population size.
    * Write a function that implements this formula. It should take the selection differential *s* and the population size *N* as parameters, and return the fixation probability as its result.
    * A selection differential of 0.5 is very strong (though not unheard of). What is the likelihood that an allele with that level of advantage will fix in a population of 1000 individuals? Interpret the result.
5. A text is *palindromic* if it reads backwards the same as it reads forwards. For example, "racecar", "deified", and "rotator" are all palindromic words. Assume that you are given a word in all lowercase, broken up by characters. For instance, you could be given the vector `c("r", "a", "c", "e", "c", "a", "r")` (a palindrome) or `c("h", "e", "l", "l", "o")` (not a palindrome).
    * Write a function which checks whether the vector encodes a palindromic text. The function should return `TRUE` if the text is a palindrome, and `FALSE` otherwise. (Hint: reverse the text, collapse both the original and the reversed vectors into single strings, and then compare them using logical equality.)
    * Modify the function to allow for both upper- and lowercase text, treating case as irrelevant (i.e., `"A"` is treated to be equal to `"a"` when evaluating whether the text is palindromic). One simple way to do this is to convert each character of the text into uppercase (or lowercase; it doesn't matter which), and use this standardized text for reversing and comparing with. Look up the functions `toupper` and `tolower`, and implement this improvement in your palindrome checker function.
    * If you haven't done so already: try to rewrite your function to rely as much on function composition as possible.
